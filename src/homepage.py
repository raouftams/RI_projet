# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'homepage.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QAbstractTableModel, Qt
from index import openPkl

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.upload_button = QtWidgets.QPushButton(self.centralwidget)
        self.upload_button.setGeometry(QtCore.QRect(110, 30, 161, 61))
        self.upload_button.setObjectName("upload_button")
        self.reset_button = QtWidgets.QPushButton(self.centralwidget)
        self.reset_button.setGeometry(QtCore.QRect(110, 100, 161, 61))
        self.reset_button.setObjectName("reset_button")
        self.inverse_file_table = QtWidgets.QTableView(self.centralwidget)
        self.inverse_file_table.setGeometry(QtCore.QRect(20, 230, 381, 321))
        self.inverse_file_table.setObjectName("inverse_file_table")
        self.inverse_file_by_freq_table = QtWidgets.QTableView(self.centralwidget)
        self.inverse_file_by_freq_table.setGeometry(QtCore.QRect(410, 20, 381, 251))
        self.inverse_file_by_freq_table.setObjectName("inverse_file_by_freq_table")
        self.inverse_file_by_weight_table = QtWidgets.QTableView(self.centralwidget)
        self.inverse_file_by_weight_table.setGeometry(QtCore.QRect(410, 290, 381, 261))
        self.inverse_file_by_weight_table.setObjectName("inverse_file_by_weight_table")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(20, 210, 101, 16))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(410, 270, 211, 16))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(410, 0, 201, 16))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 21))
        self.menubar.setObjectName("menubar")
        self.menuAccueil = QtWidgets.QMenu(self.menubar)
        self.menuAccueil.setObjectName("menuAccueil")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.action_accueil = QtWidgets.QAction(MainWindow)
        self.action_accueil.setObjectName("action_accueil")
        self.action_modele_booleen = QtWidgets.QAction(MainWindow)
        self.action_modele_booleen.setObjectName("action_modele_booleen")
        self.action_modele_vectoriel = QtWidgets.QAction(MainWindow)
        self.action_modele_vectoriel.setObjectName("action_modele_vectoriel")
        self.menuAccueil.addAction(self.action_accueil)
        self.menuAccueil.addAction(self.action_modele_booleen)
        self.menuAccueil.addAction(self.action_modele_vectoriel)
        self.menubar.addAction(self.menuAccueil.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.init_inverse_file_table()

        self.action_modele_booleen.triggered.connect(lambda: self.switch_to_boolean_modele_page())
        self.action_modele_vectoriel.triggered.connect(lambda: self.switch_to_vectorial_modele_page())
        self.action_accueil.triggered.connect(lambda: self.switch_to_home_page())

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.upload_button.setText(_translate("MainWindow", "Upload"))
        self.reset_button.setText(_translate("MainWindow", "Reset"))
        self.label.setText(_translate("MainWindow", "Fichier inversé:"))
        self.label_2.setText(_translate("MainWindow", "Fichier inversé par pondération:"))
        self.label_3.setText(_translate("MainWindow", "Fichier inversé par fréquence:"))
        self.menuAccueil.setStatusTip(_translate("MainWindow", "switch_to_home_page"))
        self.menuAccueil.setTitle(_translate("MainWindow", "Pages"))
        self.action_accueil.setText(_translate("MainWindow", "accueil"))
        self.action_modele_booleen.setText(_translate("MainWindow", "modèle booléen"))
        self.action_modele_vectoriel.setText(_translate("MainWindow", "modèle vectoriel"))

    def init_inverse_file_table(self):
        inverse_file = openPkl("out/inversefile.pkl")
        
        model = TableModel(inverse_file, None)
        self.inverse_file_table.setModel(model)

    def switch_to_boolean_modele_page(self):
        print("tnaket")
    
    def switch_to_vectorial_modele_page(self):
        print("vectorial modele page")
    
    def switch_to_home_page(self):
        print("home page")

    def upload_file(self):
        #upload file method here
        pass

    def reset_all(self):
        pass

class TableModel(QAbstractTableModel):
    def __init__(self, data, header):
        super(TableModel, self).__init__()
        self._data = data
        self._header = header

    def data(self, index, role):
        if role == Qt.DisplayRole:
            # See below for the nested-list data structure.
            # .row() indexes into the outer list,
            # .column() indexes into the sub-list
            
            return self._data[index.row()][index.column()]

    def rowCount(self, index):
        # The length of the outer list.
        return len(self._data)

    def columnCount(self, index):
        # The following takes the first sub-list, and returns
        # the length (only works if all rows are an equal length)
        return len(self._data[0])



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
